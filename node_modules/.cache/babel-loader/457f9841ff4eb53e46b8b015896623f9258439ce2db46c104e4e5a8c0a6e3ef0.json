{"ast":null,"code":"// импорты\nimport React,{useState,useEffect}from\"react\";import\"./App.css\";import SearchBox from\"./components/SearchBox\";import WeatherCard from\"./components/WeatherCard\";import LoadingScreen from\"./components/LoadingScreen\";import ErrorMessage from\"./components/ErrorMessage\";import Creator from\"./components/Creator\";// основной код\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{// статы\nconst[weatherData,setWeatherData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[city,setCity]=useState(\"Таганрог\");// проверка на рефактор города\nuseEffect(()=>{fetchWeatherData(city);},[city]);// парсинг даты с апи\nconst fetchWeatherData=async cityName=>{try{setLoading(true);const API_KEY=\"31a10cc5862fea555a3a366c4f6f28bc\";const response=await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(cityName,\"&appid=\").concat(API_KEY,\"&units=metric&lang=ru\"));if(!response.ok){// если нет ответа от сервака\nthrow new Error(\"Город не найден\");}// рефакторим дату и очищаем ошибку\nconst data=await response.json();setWeatherData(data);setError(null);}catch(err){// очищаем дату и рефакторим ошибку в случае неудачи\nsetError(err.message);setWeatherData(null);}finally{// скажем Нет загрузке!!!\nsetLoading(false);}};const handleCityChange=newCity=>{setCity(newCity);};// определяем фон в зависимости от погоды\nconst getBackgroundClass=()=>{if(!weatherData)return\"default-bg\";const mainWeather=weatherData.weather[0].main.toLowerCase();if(mainWeather.includes(\"cloud\"))return\"cloudy-bg\";if(mainWeather.includes(\"rain\"))return\"rainy-bg\";if(mainWeather.includes(\"clear\"))return\"sunny-bg\";if(mainWeather.includes(\"snow\"))return\"snowy-bg\";return\"default-bg\";};if(loading){// возвращаем dom загрузки\nreturn/*#__PURE__*/_jsx(LoadingScreen,{});}// возвращаем dom элементы\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"weather-app \".concat(getBackgroundClass()),children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(SearchBox,{onCityChange:handleCityChange}),error&&/*#__PURE__*/_jsx(ErrorMessage,{message:error}),weatherData&&/*#__PURE__*/_jsx(WeatherCard,{weatherData:weatherData}),/*#__PURE__*/_jsx(Creator,{})]})});};export default App;","map":{"version":3,"names":["React","useState","useEffect","SearchBox","WeatherCard","LoadingScreen","ErrorMessage","Creator","jsx","_jsx","jsxs","_jsxs","App","weatherData","setWeatherData","loading","setLoading","error","setError","city","setCity","fetchWeatherData","cityName","API_KEY","response","fetch","concat","ok","Error","data","json","err","message","handleCityChange","newCity","getBackgroundClass","mainWeather","weather","main","toLowerCase","includes","className","children","onCityChange"],"sources":["/Users/shkiper/Documents/GitHub/weather_web/src/App.jsx"],"sourcesContent":["// импорты\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/SearchBox\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport LoadingScreen from \"./components/LoadingScreen\";\nimport ErrorMessage from \"./components/ErrorMessage\";\nimport Creator from \"./components/Creator\";\n\n// основной код\nconst App = () => {\n    // статы\n    const [weatherData, setWeatherData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [city, setCity] = useState(\"Таганрог\");\n\n    // проверка на рефактор города\n    useEffect(() => {\n        fetchWeatherData(city);\n    }, [city]);\n\n    // парсинг даты с апи\n    const fetchWeatherData = async (cityName) => {\n        try {\n            setLoading(true);\n            const API_KEY = \"31a10cc5862fea555a3a366c4f6f28bc\";\n            const response = await fetch(\n                `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}&units=metric&lang=ru`,\n            );\n\n            if (!response.ok) {\n                // если нет ответа от сервака\n                throw new Error(\"Город не найден\");\n            }\n\n            // рефакторим дату и очищаем ошибку\n            const data = await response.json();\n            setWeatherData(data);\n            setError(null);\n        } catch (err) {\n            // очищаем дату и рефакторим ошибку в случае неудачи\n            setError(err.message);\n            setWeatherData(null);\n        } finally {\n            // скажем Нет загрузке!!!\n            setLoading(false);\n        }\n    };\n\n    const handleCityChange = (newCity) => {\n        setCity(newCity);\n    };\n\n    // определяем фон в зависимости от погоды\n    const getBackgroundClass = () => {\n        if (!weatherData) return \"default-bg\";\n\n        const mainWeather = weatherData.weather[0].main.toLowerCase();\n        if (mainWeather.includes(\"cloud\")) return \"cloudy-bg\";\n        if (mainWeather.includes(\"rain\")) return \"rainy-bg\";\n        if (mainWeather.includes(\"clear\")) return \"sunny-bg\";\n        if (mainWeather.includes(\"snow\")) return \"snowy-bg\";\n        return \"default-bg\";\n    };\n\n    if (loading) {\n        // возвращаем dom загрузки\n        return <LoadingScreen />;\n    }\n\n    // возвращаем dom элементы\n    return (\n        <div className={`weather-app ${getBackgroundClass()}`}>\n            <div className=\"container\">\n                <SearchBox onCityChange={handleCityChange} />\n\n                {error && <ErrorMessage message={error} />}\n\n                {weatherData && <WeatherCard weatherData={weatherData} />}\n\n                <Creator />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}